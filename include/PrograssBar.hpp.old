#include <iostream>
#include <chrono>

using std::cout;

struct PrograssBar{
public:
    PrograssBar(int cur_=0,bool remain_=false):cur(cur_),remain(remain_),fst(true){
        show();
    }
    void update(int p){
        if(p>100) p=100;
        if(p<0) p=0;
        cur=p;
        show();
    }
    void setRemain(bool remain_){
        remain=remain_;
    }
    void init(){
        cur=0;
        remain=0;
        fst=1;
    }
private:
    int cur;
    bool remain,fst;
    std::chrono::_V2::system_clock::time_point lst,nw;
    std::chrono::duration<int64_t,std::nano> tot=std::chrono::nanoseconds::zero();
    void show(){
        cout<<'[';
        for(int i=0;i<=100;i++){
            if(i<cur) cout<<'=';
            else if(i==cur) cout<<'>';
            else cout<<' ';
        }
        cout<<"] ";
        if(remain) show_remain();
        cout<<" "<<cur<<'/'<<100<<"% ";
        cout<<"\r";
        cout.flush();
    }
    void show_remain(){
        if(fst||cur==0){
            cout<<"na<na";
            lst=std::chrono::high_resolution_clock::now();
            fst=false;
        }
        else{
            nw=std::chrono::high_resolution_clock::now();
            auto du=nw-lst;
            lst=nw;
            tot+=du;
            cout<<int(tot.count()/1e9)/60<<':'<<int(tot.count()/1e9)%60<<'<';
            int res=tot.count()/1e9/cur*(100-cur);
            cout<<res/60<<':'<<res%60;
        }
    }
};